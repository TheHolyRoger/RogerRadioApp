import { __extends } from "tslib";
import { Injectable } from '@angular/core';
import { IonicNativePlugin, cordova } from '@ionic-native/core';
var RogerRadioPlayer = /** @class */ (function (_super) {
    __extends(RogerRadioPlayer, _super);
    function RogerRadioPlayer() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    RogerRadioPlayer.prototype.setCallbackStopped = function (callback) { return cordova(this, "setCallbackStopped", { "sync": true }, arguments); };
    RogerRadioPlayer.prototype.setCallbackTasksEnable = function (callback) { return cordova(this, "setCallbackTasksEnable", { "sync": true }, arguments); };
    RogerRadioPlayer.prototype.setCallbackTasksDisable = function (callback) { return cordova(this, "setCallbackTasksDisable", { "sync": true }, arguments); };
    RogerRadioPlayer.prototype.playerLoad = function (url) { return cordova(this, "playerLoad", { "sync": true }, arguments); };
    RogerRadioPlayer.prototype.playerReload = function () { return cordova(this, "playerReload", { "sync": true }, arguments); };
    RogerRadioPlayer.prototype.playerPlay = function () { return cordova(this, "playerPlay", { "sync": true }, arguments); };
    RogerRadioPlayer.prototype.playerStop = function () { return cordova(this, "playerStop", { "sync": true }, arguments); };
    RogerRadioPlayer.prototype.playerSetVolume = function (vol) { return cordova(this, "playerSetVolume", { "sync": true }, arguments); };
    RogerRadioPlayer.prototype.playerUnmute = function () { return cordova(this, "playerUnmute", { "sync": true }, arguments); };
    RogerRadioPlayer.prototype.playerMute = function () { return cordova(this, "playerMute", { "sync": true }, arguments); };
    RogerRadioPlayer.prototype.playerExit = function () { return cordova(this, "playerExit", { "sync": true }, arguments); };
    RogerRadioPlayer.prototype.updateMetadata = function (artist, title) { return cordova(this, "updateMetadata", { "sync": true }, arguments); };
    RogerRadioPlayer.prototype.controlsDestroy = function () { return cordova(this, "controlsDestroy", { "sync": true }, arguments); };
    RogerRadioPlayer.prototype.controlsSubscribe = function () { return cordova(this, "controlsSubscribe", { "sync": true }, arguments); };
    RogerRadioPlayer.prototype.controlsCreate = function () { return cordova(this, "controlsCreate", { "sync": true }, arguments); };
    RogerRadioPlayer.pluginName = "RogerRadioPlayer";
    RogerRadioPlayer.plugin = "cordova-plugin-roger-radio-player";
    RogerRadioPlayer.pluginRef = "cordova.plugins.rogerRadioPlayer";
    RogerRadioPlayer.repo = "https://github.com/TheHolyRogerCoin/RogerRadioApp";
    RogerRadioPlayer.platforms = ["Android"];
    RogerRadioPlayer.decorators = [
        { type: Injectable }
    ];
    return RogerRadioPlayer;
}(IonicNativePlugin));
export { RogerRadioPlayer };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvQGlvbmljLW5hdGl2ZS9wbHVnaW5zL3JvZ2VyLXJhZGlvLXBsYXllci9uZ3gvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyw4QkFBc0MsTUFBTSxvQkFBb0IsQ0FBQzs7SUEwQmxDLG9DQUFpQjs7OztJQVdyRCw2Q0FBa0IsYUFBQyxRQUFrQztJQVlyRCxpREFBc0IsYUFBQyxRQUFrQztJQVl6RCxrREFBdUIsYUFBQyxRQUFrQztJQVkxRCxxQ0FBVSxhQUFDLEdBQVc7SUFVdEIsdUNBQVk7SUFVWixxQ0FBVTtJQVVWLHFDQUFVO0lBWVYsMENBQWUsYUFBQyxHQUFXO0lBVTNCLHVDQUFZO0lBVVoscUNBQVU7SUFVVixxQ0FBVTtJQWFWLHlDQUFjLGFBQUMsTUFBYyxFQUFFLEtBQWE7SUFVNUMsMENBQWU7SUFVZiw0Q0FBaUI7SUFVakIseUNBQWM7Ozs7Ozs7Z0JBbktmLFVBQVU7OzJCQTFCWDtFQTJCc0MsaUJBQWlCO1NBQTFDLGdCQUFnQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IENvcmRvdmEsIElvbmljTmF0aXZlUGx1Z2luLCBQbHVnaW4gfSBmcm9tICdAaW9uaWMtbmF0aXZlL2NvcmUnO1xuXG4vKipcbiAqIEBuYW1lIFJvZ2VyUmFkaW9QbGF5ZXJcbiAqIEBkZXNjcmlwdGlvblxuICogQ29yZG92YSBwbHVnaW4gZm9yIFJvZ2VyUmFkaW8gUGxheWVyLlxuICogUmVxdWlyZXMgQ29yZG92YSBwbHVnaW46IGNvcmRvdmEtcGx1Z2luLXJvZ2VyLXJhZGlvLXBsYXllci5cbiAqIEB1c2FnZVxuICogYGBgdHlwZXNjcmlwdFxuICogaW1wb3J0IHsgUm9nZXJSYWRpb1BsYXllciB9IGZyb20gJ0Bpb25pYy1uYXRpdmUvcm9nZXItcmFkaW8tcGxheWVyL25neCc7XG4gKlxuICogY29uc3RydWN0b3IocHJpdmF0ZSByb2dlclJhZGlvUGxheWVyOiBSb2dlclJhZGlvUGxheWVyKSB7IH1cbiAqXG4gKiAuLi5cbiAqXG4gKiBgYGBcbiAqXG4gKi9cbkBQbHVnaW4oe1xuICBwbHVnaW5OYW1lOiAnUm9nZXJSYWRpb1BsYXllcicsXG4gIHBsdWdpbjogJ2NvcmRvdmEtcGx1Z2luLXJvZ2VyLXJhZGlvLXBsYXllcicsXG4gIHBsdWdpblJlZjogJ2NvcmRvdmEucGx1Z2lucy5yb2dlclJhZGlvUGxheWVyJyxcbiAgcmVwbzogJ2h0dHBzOi8vZ2l0aHViLmNvbS9UaGVIb2x5Um9nZXJDb2luL1JvZ2VyUmFkaW9BcHAnLFxuICBwbGF0Zm9ybXM6IFsnQW5kcm9pZCddLFxufSlcbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBSb2dlclJhZGlvUGxheWVyIGV4dGVuZHMgSW9uaWNOYXRpdmVQbHVnaW4ge1xuICAvKipcbiAgICogc2V0Q2FsbGJhY2tTdG9wcGVkXG4gICAqXG4gICAqIEBwYXJhbSBjYWxsYmFjayB7ZnVuY3Rpb259XG4gICAqXG4gICAqIEByZXR1cm4ge3ZvaWR9XG4gICAqL1xuICBAQ29yZG92YSh7XG4gICAgc3luYzogdHJ1ZSxcbiAgfSlcbiAgc2V0Q2FsbGJhY2tTdG9wcGVkKGNhbGxiYWNrOiAoLi4uYXJnczogYW55W10pID0+IHZvaWQpOiB2b2lkIHt9XG5cbiAgLyoqXG4gICAqIHNldENhbGxiYWNrVGFza3NFbmFibGVcbiAgICpcbiAgICogQHBhcmFtIGNhbGxiYWNrIHtmdW5jdGlvbn1cbiAgICpcbiAgICogQHJldHVybiB7dm9pZH1cbiAgICovXG4gIEBDb3Jkb3ZhKHtcbiAgICBzeW5jOiB0cnVlLFxuICB9KVxuICBzZXRDYWxsYmFja1Rhc2tzRW5hYmxlKGNhbGxiYWNrOiAoLi4uYXJnczogYW55W10pID0+IHZvaWQpOiB2b2lkIHt9XG5cbiAgLyoqXG4gICAqIHNldENhbGxiYWNrVGFza3NEaXNhYmxlXG4gICAqXG4gICAqIEBwYXJhbSBjYWxsYmFjayB7ZnVuY3Rpb259XG4gICAqXG4gICAqIEByZXR1cm4ge3ZvaWR9XG4gICAqL1xuICBAQ29yZG92YSh7XG4gICAgc3luYzogdHJ1ZSxcbiAgfSlcbiAgc2V0Q2FsbGJhY2tUYXNrc0Rpc2FibGUoY2FsbGJhY2s6ICguLi5hcmdzOiBhbnlbXSkgPT4gdm9pZCk6IHZvaWQge31cblxuICAvKipcbiAgICogcGxheWVyTG9hZFxuICAgKlxuICAgKiBAcGFyYW0gdXJsIHtzdHJpbmd9XG4gICAqXG4gICAqIEByZXR1cm4ge3ZvaWR9XG4gICAqL1xuICBAQ29yZG92YSh7XG4gICAgc3luYzogdHJ1ZSxcbiAgfSlcbiAgcGxheWVyTG9hZCh1cmw6IHN0cmluZyk6IHZvaWQge31cblxuICAvKipcbiAgICogcGxheWVyUmVsb2FkXG4gICAqXG4gICAqIEByZXR1cm4ge3ZvaWR9XG4gICAqL1xuICBAQ29yZG92YSh7XG4gICAgc3luYzogdHJ1ZSxcbiAgfSlcbiAgcGxheWVyUmVsb2FkKCk6IHZvaWQge31cblxuICAvKipcbiAgICogcGxheWVyUGxheVxuICAgKlxuICAgKiBAcmV0dXJuIHt2b2lkfVxuICAgKi9cbiAgQENvcmRvdmEoe1xuICAgIHN5bmM6IHRydWUsXG4gIH0pXG4gIHBsYXllclBsYXkoKTogdm9pZCB7fVxuXG4gIC8qKlxuICAgKiBwbGF5ZXJTdG9wXG4gICAqXG4gICAqIEByZXR1cm4ge3ZvaWR9XG4gICAqL1xuICBAQ29yZG92YSh7XG4gICAgc3luYzogdHJ1ZSxcbiAgfSlcbiAgcGxheWVyU3RvcCgpOiB2b2lkIHt9XG5cbiAgLyoqXG4gICAqIHBsYXllclNldFZvbHVtZVxuICAgKlxuICAgKiBAcGFyYW0gdm9sIHtudW1iZXJ9XG4gICAqXG4gICAqIEByZXR1cm4ge3ZvaWR9XG4gICAqL1xuICBAQ29yZG92YSh7XG4gICAgc3luYzogdHJ1ZSxcbiAgfSlcbiAgcGxheWVyU2V0Vm9sdW1lKHZvbDogbnVtYmVyKTogdm9pZCB7fVxuXG4gIC8qKlxuICAgKiBwbGF5ZXJVbm11dGVcbiAgICpcbiAgICogQHJldHVybiB7dm9pZH1cbiAgICovXG4gIEBDb3Jkb3ZhKHtcbiAgICBzeW5jOiB0cnVlLFxuICB9KVxuICBwbGF5ZXJVbm11dGUoKTogdm9pZCB7fVxuXG4gIC8qKlxuICAgKiBwbGF5ZXJNdXRlXG4gICAqXG4gICAqIEByZXR1cm4ge3ZvaWR9XG4gICAqL1xuICBAQ29yZG92YSh7XG4gICAgc3luYzogdHJ1ZSxcbiAgfSlcbiAgcGxheWVyTXV0ZSgpOiB2b2lkIHt9XG5cbiAgLyoqXG4gICAqIHBsYXllckV4aXRcbiAgICpcbiAgICogQHJldHVybiB7dm9pZH1cbiAgICovXG4gIEBDb3Jkb3ZhKHtcbiAgICBzeW5jOiB0cnVlLFxuICB9KVxuICBwbGF5ZXJFeGl0KCk6IHZvaWQge31cblxuICAvKipcbiAgICogdXBkYXRlTWV0YWRhdGFcbiAgICpcbiAgICogQHBhcmFtIGFydGlzdCB7c3RyaW5nfVxuICAgKiBAcGFyYW0gdGl0bGUge3N0cmluZ31cbiAgICpcbiAgICogQHJldHVybiB7dm9pZH1cbiAgICovXG4gIEBDb3Jkb3ZhKHtcbiAgICBzeW5jOiB0cnVlLFxuICB9KVxuICB1cGRhdGVNZXRhZGF0YShhcnRpc3Q6IHN0cmluZywgdGl0bGU6IHN0cmluZyk6IHZvaWQge31cblxuICAvKipcbiAgICogY29udHJvbHNEZXN0cm95XG4gICAqXG4gICAqIEByZXR1cm4ge3ZvaWR9XG4gICAqL1xuICBAQ29yZG92YSh7XG4gICAgc3luYzogdHJ1ZSxcbiAgfSlcbiAgY29udHJvbHNEZXN0cm95KCk6IHZvaWQge31cblxuICAvKipcbiAgICogY29udHJvbHNTdWJzY3JpYmVcbiAgICpcbiAgICogQHJldHVybiB7dm9pZH1cbiAgICovXG4gIEBDb3Jkb3ZhKHtcbiAgICBzeW5jOiB0cnVlLFxuICB9KVxuICBjb250cm9sc1N1YnNjcmliZSgpOiB2b2lkIHt9XG5cbiAgLyoqXG4gICAqIGNvbnRyb2xzQ3JlYXRlXG4gICAqXG4gICAqIEByZXR1cm4ge3ZvaWR9XG4gICAqL1xuICBAQ29yZG92YSh7XG4gICAgc3luYzogdHJ1ZSxcbiAgfSlcbiAgY29udHJvbHNDcmVhdGUoKTogdm9pZCB7fVxufVxuIl19